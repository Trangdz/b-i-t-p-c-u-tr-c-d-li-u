#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char hoTen[20];
    int tuoi;
    float diemTB;
} SinhVien;

typedef struct node{
    SinhVien data;
    struct node* next;
    struct node* previous;
} Node;

Node* first = NULL;
Node* last = NULL;

SinhVien nhapThongTin()
{
    SinhVien sv;

    printf("\tHo ten: ");
    fflush(stdin);
    gets(sv.hoTen);

    printf("\tTuoi: ");
    scanf("%d",&sv.tuoi);

    printf("\tDiem: ");
    scanf("%f",&sv.diemTB);

    return sv;
}

Node* capPhatNode()
{
    Node* pNode = (Node*)malloc(sizeof(Node));
    if (pNode==NULL)
    {
        printf("\tKhong du o nho de tao\n");
    }
    return pNode;
}

Node* taoNode()
{
    //Cấp phát
    Node* pNode = capPhatNode();

    //Nhập thông tin
    pNode->data = nhapThongTin();

    //Trỏ
    pNode->next = pNode->previous = NULL;

    return pNode;
}

void themNodeVaoCuoi(Node* pNode)
{
    if (first==NULL)
    {
        first = pNode;
        last = pNode;
    }
    else
    {
        last->next = pNode;
        pNode->next = NULL;
        pNode->previous = last;
        last = pNode;
    }
}

void taoDanhSach ()
{
    int n;
    printf("\tNhap so luong sinh vien: ");
    scanf("%d",&n);
    for (int i=1; i<=n; i++)
    {
        printf("\t\tNhap sinh vien thu %d\n",i);
        themNodeVaoCuoi(taoNode());
    }
}

void hienThiMotSinhVien (SinhVien sv)
{
    printf("%20s%6d%8.2f\n",sv.hoTen,sv.tuoi,sv.diemTB);
}

void hienThiDanhSach()
{
    int stt = 1;
    printf("\t%5s%20s%6s%8s\n","STT","Ho ten", "Tuoi", "DiemTB");
    for (Node* i = first; i!= NULL ; i=i->next)
    {
        printf("\t%5d",stt++);
        hienThiMotSinhVien(i->data);
    }
}

Node* timNodeTheoTenSV (char* tenSVCanTim)
{
    for (Node* i=first; i!=NULL; i=i->next)
    {
        if (strcmp(i->data.hoTen,tenSVCanTim)==0)
            return i;
    }
    return NULL;
}

void chenPNodeTruocQNode (Node* pNode, Node* qNode)
{
    if (qNode == NULL || pNode == NULL)
        return;

    if (qNode == first)
    {
        pNode->next = qNode;
        qNode->previous = pNode;
        pNode->previous = NULL;
        first = pNode;
    }
    else
    {
        pNode->next = qNode;
        pNode->previous = qNode->previous;
        qNode->previous->next = pNode;
        qNode->previous = pNode;
    }
}

void xoaNode (Node* pNode)
{
    if (pNode == NULL)
        return;
    if (pNode == first)
    {
        if (last==first)
            last = NULL;
        first = first->next;
        if (first!=NULL)
            first->previous = NULL;
        free(pNode);
        return;
    }
    if (pNode == last)
    {
        last = pNode->previous;
        last->next = NULL;
        free (pNode);
        return;
    }

    pNode->previous->next = pNode->next;
    pNode->next->previous = pNode->previous;
    free(pNode);

}

void menu()
{
    printf("\t\tMENU\n");
    printf("\t1. Tao DSSV\n");
    printf("\t2. Hien thi DSSV\n");
    printf("\t3. Chen sinh vien truoc sinh vien khac theo ten\n");
    printf("\t4. Xoa sinh vien theo ten\n");
    printf("\t0. Thoat\n");
    printf("\t\tVui long chon: ");
}

int main()
{
    while (1)
    {
        menu();
        int chon;
        scanf("%d",&chon);
        switch(chon)
        {
            case 1:
            {
                printf("\t\tNhap danh sach sinh vien\n");
                taoDanhSach();
                break;
            }

            case 2:
            {
                hienThiDanhSach();
                break;
            }
            case 3:
            {
                printf("\tNhap ten sinh vien dung sau: ");
                char hoTenSV[20];
                fflush(stdin);
                gets(hoTenSV);
                Node* qNode = timNodeTheoTenSV(hoTenSV);
                if (qNode==NULL)
                    printf("\tKhong tim thay sinh vien ten %s\n",hoTenSV);
                else
                {
                    printf("\t\tNhap thong tin sinh vien can chen\n");
                    chenPNodeTruocQNode(taoNode(),qNode);
                }
                break;
            }
            case 4:
            {
                printf("\tNhap ten sinh vien muon xoa: ");
                char hoTenSV[20];
                fflush(stdin);
                gets(hoTenSV);
                Node* qNode = timNodeTheoTenSV(hoTenSV);
                if (qNode==NULL)
                    printf("\tKhong tim thay sinh vien ten %s\n",hoTenSV);
                else
                {
                    xoaNode(qNode);
                }
                break;
            }
            case 0:
            {
                printf("\tBYE BYE");
                return 0;
            }
            default:
                printf("\t\tCHI NHAP TU 0-4\n");
        }
    }
}