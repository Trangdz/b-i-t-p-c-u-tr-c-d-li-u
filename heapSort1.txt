#include <stdio.h>

// Function to swap the position of two elements
void nhapMang(int a[],int n)
{
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
}
void inMang(int a[],int n)
{
    for(int i=0;i<n;i++)
    {
        printf("%3d",a[i]);
    }
}
void swap(int* a, int* b)
{

    int temp = *a;

    *a = *b;

    *b = temp;
}

// To heapify a subtree rooted with node i
// which is an index in arr[].
// n is size of heap
void heapify(int arr[], int N, int i)
{
    // Find largest among root, left child and right child  Tìm số lớn nhất của node gốc và node con trái và phải

    // Initialize largest as root khởi tạo lớn nhất dưới dạng gốc
    int largest = i; 

    // left = 2*i + 1
    int left = 2 * i + 1;

    // right = 2*i + 2
    int right = 2 * i + 2;

    // If left child is larger than root nếu node con trái lớn hơn gốc thì
    if (left < N && arr[left] > arr[largest])

        largest = left;

    // If right child is larger than largest
    // so far
    if (right < N && arr[right] > arr[largest])

        largest = right;

    // Swap and continue heapifying if root is not largest
    // If largest is not root
    if (largest != i) {

        swap(&arr[i], &arr[largest]);

        // Recursively heapify the affected
        // sub-tree
        heapify(arr, N, largest);
    }
}

// Main function to do heap sort
void heapSort(int arr[], int N)
{

    // Build max heap
    for (int i = N / 2 - 1; i >= 0; i--)

        heapify(arr, N, i);

    // Heap sort
    for (int i = N - 1; i >= 0; i--) {

        swap(&arr[0], &arr[i]);

        // Heapify root element to get highest element at
        // root again
        heapify(arr, i, 0);
    }
}

// A utility function to print array of size n


// Driver's code
int main()
{
    int a[100],n;
    scanf("%d",&n);
    nhapMang(a,n);

    // Function call
    heapSort(a,n);
    printf("Sorted array is\n");
    inMang(a,n);
}
